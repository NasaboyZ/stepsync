PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "migrations" ("id" integer primary key autoincrement not null, "migration" varchar not null, "batch" integer not null);
INSERT INTO migrations VALUES(1,'000_personal_access_tokens',1);
INSERT INTO migrations VALUES(2,'010_users',1);
INSERT INTO migrations VALUES(3,'050_workout',1);
INSERT INTO migrations VALUES(4,'060_bmi',1);
INSERT INTO migrations VALUES(5,'061_bmi_history',1);
INSERT INTO migrations VALUES(6,'070_challenges',1);
INSERT INTO migrations VALUES(7,'080_image',1);
CREATE TABLE IF NOT EXISTS "personal_access_tokens" ("id" integer primary key autoincrement not null, "tokenable_type" varchar not null, "tokenable_id" integer not null, "name" varchar not null, "token" varchar not null, "abilities" text, "last_used_at" datetime, "expires_at" datetime, "created_at" datetime, "updated_at" datetime);
CREATE TABLE IF NOT EXISTS "users" ("id" integer primary key autoincrement not null, "first_name" varchar not null, "last_name" varchar not null, "username" varchar not null, "email" varchar not null, "weight" float not null, "height" float not null, "password" varchar not null, "goal" varchar not null, "gender" varchar check ("gender" in ('male', 'female', 'other')) not null, "date_of_birth" date not null, "created_at" datetime, "updated_at" datetime);
INSERT INTO users VALUES(1,'Alpha','User','alphauser','alpha@mailinator.com',70.0,1.75,'$2y$12$3RJ6K4vJBHCeUaR6.3.V0e23AJ9XZYPplV1P4t8zGxUvKtxBCHRj2','Increase Muscle Size','male','1990-01-01','2025-02-16 21:27:24','2025-02-16 21:27:24');
INSERT INTO users VALUES(2,'Bravo','User','bravouser','bravo@mailinator.com',80.0,1.8,'$2y$12$mOH9.2F/vfTnmaVK3GaJ1u47SSjtumNHuoQKS/aX6GADBJZo8AjxC','Lose Weight','female','1992-05-15','2025-02-16 21:27:25','2025-02-16 21:27:25');
CREATE TABLE IF NOT EXISTS "workouts" ("id" integer primary key autoincrement not null, "category" varchar not null, "title" varchar not null, "description" text not null, "weight" integer, "repetitions" integer, "distance" numeric, "distance_unit" varchar check ("distance_unit" in ('meter', 'kilometer')), "is_completed" tinyint(1) not null default '0', "completed_at" datetime, "user_id" integer not null, "created_at" datetime, "updated_at" datetime, foreign key("user_id") references "users"("id") on delete cascade);
CREATE TABLE IF NOT EXISTS "b_m_i_s" ("id" integer primary key autoincrement not null, "height" float, "weight" float, "user_id" integer not null, "created_at" datetime, "updated_at" datetime, foreign key("user_id") references "users"("id") on delete cascade);
CREATE TABLE IF NOT EXISTS "bmi_history" ("id" integer primary key autoincrement not null, "height" float not null, "weight" float not null, "bmi_value" float not null, "user_id" integer not null, "created_at" datetime, "updated_at" datetime, foreign key("user_id") references "users"("id") on delete cascade);
CREATE TABLE IF NOT EXISTS "challenges" ("id" integer primary key autoincrement not null, "title" varchar not null, "description" text not null, "status" varchar not null default 'pending', "start_date" datetime, "end_date" datetime, "created_at" datetime, "updated_at" datetime);
CREATE TABLE IF NOT EXISTS "challenge_user" ("id" integer primary key autoincrement not null, "user_id" integer not null, "challenge_id" integer not null, "status" varchar check ("status" in ('done', 'pending', 'pass', 'accepted')) not null default 'pending', "created_at" datetime, "updated_at" datetime, foreign key("user_id") references "users"("id") on delete cascade, foreign key("challenge_id") references "challenges"("id") on delete cascade);
CREATE TABLE IF NOT EXISTS "images" ("id" integer primary key autoincrement not null, "user_id" integer, "path" varchar not null, "created_at" datetime, "updated_at" datetime, foreign key("user_id") references "users"("id") on delete cascade);
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES('migrations',7);
INSERT INTO sqlite_sequence VALUES('users',2);
CREATE INDEX "personal_access_tokens_tokenable_type_tokenable_id_index" on "personal_access_tokens" ("tokenable_type", "tokenable_id");
CREATE UNIQUE INDEX "personal_access_tokens_token_unique" on "personal_access_tokens" ("token");
CREATE UNIQUE INDEX "users_username_unique" on "users" ("username");
CREATE UNIQUE INDEX "users_email_unique" on "users" ("email");
COMMIT;
